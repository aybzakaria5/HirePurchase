/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Installment as PrismaInstallment } from "@prisma/client";

export class InstallmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstallmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.installment.count(args);
  }

  async installments(
    args: Prisma.InstallmentFindManyArgs
  ): Promise<PrismaInstallment[]> {
    return this.prisma.installment.findMany(args);
  }
  async installment(
    args: Prisma.InstallmentFindUniqueArgs
  ): Promise<PrismaInstallment | null> {
    return this.prisma.installment.findUnique(args);
  }
  async createInstallment(
    args: Prisma.InstallmentCreateArgs
  ): Promise<PrismaInstallment> {
    return this.prisma.installment.create(args);
  }
  async updateInstallment(
    args: Prisma.InstallmentUpdateArgs
  ): Promise<PrismaInstallment> {
    return this.prisma.installment.update(args);
  }
  async deleteInstallment(
    args: Prisma.InstallmentDeleteArgs
  ): Promise<PrismaInstallment> {
    return this.prisma.installment.delete(args);
  }
}
